// Code generated by goctl. DO NOT EDIT!
// Source: email.proto

package email

import (
	"context"

	"cleaningservice/service/email/rpc/types/email"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddressMsg           = email.AddressMsg
	AnnouncementRequest  = email.AnnouncementRequest
	AnnouncementResponse = email.AnnouncementResponse
	CategoryMsg          = email.CategoryMsg
	CustomerMsg          = email.CustomerMsg
	GeneralEmailRequest  = email.GeneralEmailRequest
	GeneralEmailResponse = email.GeneralEmailResponse
	InvoiceEmailRequest  = email.InvoiceEmailRequest
	InvoiceEmailResponse = email.InvoiceEmailResponse
	OrderMsg             = email.OrderMsg
	ServiceMsg           = email.ServiceMsg

	Email interface {
		Announcement(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*AnnouncementResponse, error)
		InvoiceEmail(ctx context.Context, in *InvoiceEmailRequest, opts ...grpc.CallOption) (*InvoiceEmailResponse, error)
		GeneralEmail(ctx context.Context, in *GeneralEmailRequest, opts ...grpc.CallOption) (*GeneralEmailResponse, error)
	}

	defaultEmail struct {
		cli zrpc.Client
	}
)

func NewEmail(cli zrpc.Client) Email {
	return &defaultEmail{
		cli: cli,
	}
}

func (m *defaultEmail) Announcement(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*AnnouncementResponse, error) {
	client := email.NewEmailClient(m.cli.Conn())
	return client.Announcement(ctx, in, opts...)
}

func (m *defaultEmail) InvoiceEmail(ctx context.Context, in *InvoiceEmailRequest, opts ...grpc.CallOption) (*InvoiceEmailResponse, error) {
	client := email.NewEmailClient(m.cli.Conn())
	return client.InvoiceEmail(ctx, in, opts...)
}

func (m *defaultEmail) GeneralEmail(ctx context.Context, in *GeneralEmailRequest, opts ...grpc.CallOption) (*GeneralEmailResponse, error) {
	client := email.NewEmailClient(m.cli.Conn())
	return client.GeneralEmail(ctx, in, opts...)
}
