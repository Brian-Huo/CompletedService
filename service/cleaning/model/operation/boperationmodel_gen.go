// Code generated by goctl. DO NOT EDIT!

package operation

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bOperationFieldNames          = builder.RawFieldNames(&BOperation{})
	bOperationRows                = strings.Join(bOperationFieldNames, ",")
	bOperationRowsExpectAutoSet   = strings.Join(stringx.Remove(bOperationFieldNames, "`operation_id`", "`create_time`", "`update_time`"), ",")
	bOperationRowsWithPlaceHolder = strings.Join(stringx.Remove(bOperationFieldNames, "`operation_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBOperationOperationIdPrefix = "cache:bOperation:operationId:"
)

type (
	bOperationModel interface {
		Insert(ctx context.Context, data *BOperation) (sql.Result, error)
		FindOne(ctx context.Context, operationId int64) (*BOperation, error)
		Update(ctx context.Context, data *BOperation) error
		Delete(ctx context.Context, operationId int64) error
	}

	defaultBOperationModel struct {
		sqlc.CachedConn
		table string
	}

	BOperation struct {
		OperationId  int64     `db:"operation_id"`
		ContractorId int64     `db:"contractor_id"`
		OrderId      int64     `db:"order_id"`
		Operation    int64     `db:"operation"`
		CreateTime   time.Time `db:"create_time"`
	}
)

func newBOperationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBOperationModel {
	return &defaultBOperationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_operation`",
	}
}

func (m *defaultBOperationModel) Insert(ctx context.Context, data *BOperation) (sql.Result, error) {
	bOperationOperationIdKey := fmt.Sprintf("%s%v", cacheBOperationOperationIdPrefix, data.OperationId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bOperationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ContractorId, data.OrderId, data.Operation)
	}, bOperationOperationIdKey)
	return ret, err
}

func (m *defaultBOperationModel) FindOne(ctx context.Context, operationId int64) (*BOperation, error) {
	bOperationOperationIdKey := fmt.Sprintf("%s%v", cacheBOperationOperationIdPrefix, operationId)
	var resp BOperation
	err := m.QueryRowCtx(ctx, &resp, bOperationOperationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `operation_id` = ? limit 1", bOperationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, operationId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOperationModel) Update(ctx context.Context, data *BOperation) error {
	bOperationOperationIdKey := fmt.Sprintf("%s%v", cacheBOperationOperationIdPrefix, data.OperationId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `operation_id` = ?", m.table, bOperationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ContractorId, data.OrderId, data.Operation, data.OperationId)
	}, bOperationOperationIdKey)
	return err
}

func (m *defaultBOperationModel) Delete(ctx context.Context, operationId int64) error {
	bOperationOperationIdKey := fmt.Sprintf("%s%v", cacheBOperationOperationIdPrefix, operationId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `operation_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, operationId)
	}, bOperationOperationIdKey)
	return err
}

func (m *defaultBOperationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBOperationOperationIdPrefix, primary)
}

func (m *defaultBOperationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `operation_id` = ? limit 1", bOperationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBOperationModel) tableName() string {
	return m.table
}
