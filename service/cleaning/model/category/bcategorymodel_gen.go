// Code generated by goctl. DO NOT EDIT!

package category

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bCategoryFieldNames          = builder.RawFieldNames(&BCategory{})
	bCategoryRows                = strings.Join(bCategoryFieldNames, ",")
	bCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(bCategoryFieldNames, "`category_id`", "`create_time`", "`update_time`"), ",")
	bCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(bCategoryFieldNames, "`category_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBCategoryCategoryIdPrefix   = "cache:bCategory:categoryId:"
	cacheBCategoryCategoryNamePrefix = "cache:bCategory:categoryName:"
)

type (
	bCategoryModel interface {
		Insert(ctx context.Context, data *BCategory) (sql.Result, error)
		FindOne(ctx context.Context, categoryId int64) (*BCategory, error)
		FindOneByCategoryName(ctx context.Context, categoryName string) (*BCategory, error)
		Update(ctx context.Context, data *BCategory) error
		Delete(ctx context.Context, categoryId int64) error
	}

	defaultBCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	BCategory struct {
		CategoryId          int64   `db:"category_id"`
		CategoryAddr        string  `db:"category_addr"`
		CategoryName        string  `db:"category_name"`
		CategoryDescription string  `db:"category_description"`
		ServeRange          float64 `db:"serve_range"`
	}
)

func newBCategoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBCategoryModel {
	return &defaultBCategoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_category`",
	}
}

func (m *defaultBCategoryModel) Insert(ctx context.Context, data *BCategory) (sql.Result, error) {
	bCategoryCategoryIdKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryIdPrefix, data.CategoryId)
	bCategoryCategoryNameKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryNamePrefix, data.CategoryName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CategoryAddr, data.CategoryName, data.CategoryDescription, data.ServeRange)
	}, bCategoryCategoryIdKey, bCategoryCategoryNameKey)
	return ret, err
}

func (m *defaultBCategoryModel) FindOne(ctx context.Context, categoryId int64) (*BCategory, error) {
	bCategoryCategoryIdKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryIdPrefix, categoryId)
	var resp BCategory
	err := m.QueryRowCtx(ctx, &resp, bCategoryCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `category_id` = ? limit 1", bCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, categoryId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCategoryModel) FindOneByCategoryName(ctx context.Context, categoryName string) (*BCategory, error) {
	bCategoryCategoryNameKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryNamePrefix, categoryName)
	var resp BCategory
	err := m.QueryRowIndexCtx(ctx, &resp, bCategoryCategoryNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `category_name` = ? limit 1", bCategoryRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, categoryName); err != nil {
			return nil, err
		}
		return resp.CategoryId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCategoryModel) Update(ctx context.Context, data *BCategory) error {
	bCategoryCategoryIdKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryIdPrefix, data.CategoryId)
	bCategoryCategoryNameKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryNamePrefix, data.CategoryName)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `category_id` = ?", m.table, bCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CategoryAddr, data.CategoryName, data.CategoryDescription, data.ServeRange, data.CategoryId)
	}, bCategoryCategoryIdKey, bCategoryCategoryNameKey)
	return err
}

func (m *defaultBCategoryModel) Delete(ctx context.Context, categoryId int64) error {
	data, err := m.FindOne(ctx, categoryId)
	if err != nil {
		return err
	}

	bCategoryCategoryIdKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryIdPrefix, categoryId)
	bCategoryCategoryNameKey := fmt.Sprintf("%s%v", cacheBCategoryCategoryNamePrefix, data.CategoryName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `category_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, categoryId)
	}, bCategoryCategoryIdKey, bCategoryCategoryNameKey)
	return err
}

func (m *defaultBCategoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBCategoryCategoryIdPrefix, primary)
}

func (m *defaultBCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `category_id` = ? limit 1", bCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBCategoryModel) tableName() string {
	return m.table
}
