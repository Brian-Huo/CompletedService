// Code generated by goctl. DO NOT EDIT!

package order

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bOrderFieldNames          = builder.RawFieldNames(&BOrder{})
	bOrderRows                = strings.Join(bOrderFieldNames, ",")
	bOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(bOrderFieldNames, "`order_id`", "`create_time`", "`update_time`"), ",")
	bOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(bOrderFieldNames, "`order_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBOrderOrderIdPrefix = "cache:bOrder:orderId:"
)

type (
	bOrderModel interface {
		Insert(ctx context.Context, data *BOrder) (sql.Result, error)
		FindOne(ctx context.Context, orderId int64) (*BOrder, error)
		Update(ctx context.Context, data *BOrder) error
		Delete(ctx context.Context, orderId int64) error
	}

	defaultBOrderModel struct {
		sqlc.CachedConn
		table string
	}

	BOrder struct {
		OrderId             int64          `db:"order_id"`
		CustomerId          int64          `db:"customer_id"`
		AddressId           int64          `db:"address_id"`
		ContractorId        sql.NullInt64  `db:"contractor_id"`
		FinanceId           sql.NullInt64  `db:"finance_id"`
		CategoryId          int64          `db:"category_id"`
		BasicItems          string         `db:"basic_items"`
		AdditionalItems     sql.NullString `db:"additional_items"`
		DepositePayment     sql.NullInt64  `db:"deposite_payment"`
		DepositeAmount      float64        `db:"deposite_amount"`
		DepositeDate        sql.NullTime   `db:"deposite_date"`
		FinalPayment        sql.NullInt64  `db:"final_payment"`
		FinalAmount         float64        `db:"final_amount"`
		FinalPaymentDate    sql.NullTime   `db:"final_payment_date"`
		CurrentDepositeRate int64          `db:"current_deposite_rate"`
		ItemAmount          float64        `db:"item_amount"`
		GstAmount           float64        `db:"gst_amount"`
		SurchargeItem       string         `db:"surcharge_item"`
		SurchargeRate       int64          `db:"surcharge_rate"`
		SurchargeAmount     float64        `db:"surcharge_amount"`
		TotalAmount         float64        `db:"total_amount"`
		OrderDescription    sql.NullString `db:"order_description"`
		OrderComments       sql.NullString `db:"order_comments"`
		PostDate            time.Time      `db:"post_date"`
		ReserveDate         time.Time      `db:"reserve_date"`
		FinishDate          sql.NullTime   `db:"finish_date"`
		Status              int64          `db:"status"`
		UrgantFlag          int64          `db:"urgant_flag"`
		CreateTime          time.Time      `db:"create_time"`
		UpdateTime          time.Time      `db:"update_time"`
	}
)

func newBOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBOrderModel {
	return &defaultBOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_order`",
	}
}

func (m *defaultBOrderModel) Insert(ctx context.Context, data *BOrder) (sql.Result, error) {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CustomerId, data.AddressId, data.ContractorId, data.FinanceId, data.CategoryId, data.BasicItems, data.AdditionalItems, data.DepositePayment, data.DepositeAmount, data.DepositeDate, data.FinalPayment, data.FinalAmount, data.FinalPaymentDate, data.CurrentDepositeRate, data.ItemAmount, data.GstAmount, data.SurchargeItem, data.SurchargeRate, data.SurchargeAmount, data.TotalAmount, data.OrderDescription, data.OrderComments, data.PostDate, data.ReserveDate, data.FinishDate, data.Status, data.UrgantFlag)
	}, bOrderOrderIdKey)
	return ret, err
}

func (m *defaultBOrderModel) FindOne(ctx context.Context, orderId int64) (*BOrder, error) {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, orderId)
	var resp BOrder
	err := m.QueryRowCtx(ctx, &resp, bOrderOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) Update(ctx context.Context, data *BOrder) error {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, bOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CustomerId, data.AddressId, data.ContractorId, data.FinanceId, data.CategoryId, data.BasicItems, data.AdditionalItems, data.DepositePayment, data.DepositeAmount, data.DepositeDate, data.FinalPayment, data.FinalAmount, data.FinalPaymentDate, data.CurrentDepositeRate, data.ItemAmount, data.GstAmount, data.SurchargeItem, data.SurchargeRate, data.SurchargeAmount, data.TotalAmount, data.OrderDescription, data.OrderComments, data.PostDate, data.ReserveDate, data.FinishDate, data.Status, data.UrgantFlag, data.OrderId)
	}, bOrderOrderIdKey)
	return err
}

func (m *defaultBOrderModel) Delete(ctx context.Context, orderId int64) error {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, bOrderOrderIdKey)
	return err
}

func (m *defaultBOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, primary)
}

func (m *defaultBOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBOrderModel) tableName() string {
	return m.table
}
