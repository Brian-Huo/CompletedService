// Code generated by goctl. DO NOT EDIT!

package awaitqueue

import (
	"fmt"
	"strconv"

	"github.com/zeromicro/go-zero/core/stores/redis"
)

var (
	cacheRAwaitQueuePrefix = "cache:rAwaitQueue"
)

type (
	rAwaitQueueModel interface {
		Insert(data *RAwaitQueue) (error)
		FindOne(orderId int64) (*int, error)
		Delete(orderId int64) (bool, error)
	}

	defaultRAwaitQueueModel struct {
		conn redis.Redis
		table string
	}

	RAwaitQueue struct {
		OrderId int64 `db:"order_id"`
		Vacancy int   `db:"vacancy"`
	}
)

func newRAwaitQueueModel(c redis.RedisConf) *defaultRAwaitQueueModel {
	return &defaultRAwaitQueueModel{
		conn:       *c.NewRedis(),
		table:      "`r_await_queue`",
	}
}

func (m *defaultRAwaitQueueModel) Insert(data *RAwaitQueue) (error) {
	err := m.conn.Hset(cacheRAwaitQueuePrefix, strconv.FormatInt(data.OrderId, 10), strconv.Itoa(data.Vacancy))
	return err
}

func (m *defaultRAwaitQueueModel) FindOne(orderId int64) (*int, error) {
	ret, err := m.conn.Hget(cacheRAwaitQueuePrefix, strconv.FormatInt(orderId, 10))
	switch err {
	case nil:
		ret_int, err := strconv.Atoi(ret)
		if err != nil {
			return nil, err
		} else {
			return &ret_int, nil
		}
	case redis.Nil:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRAwaitQueueModel) Delete(orderId int64) (bool, error) {
	ret, err := m.conn.Hdel(cacheRAwaitQueuePrefix, strconv.FormatInt(orderId, 10))
	return ret, err
}

func (m *defaultRAwaitQueueModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRAwaitQueuePrefix, primary)
}

func (m *defaultRAwaitQueueModel) tableName() string {
	return m.table
}
