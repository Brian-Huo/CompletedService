// Code generated by goctl. DO NOT EDIT!

package subscription

import (
	"fmt"
	"strconv"

	"github.com/zeromicro/go-zero/core/stores/redis"
)

var (
	cacheBSubscriptionGroupIdPrefix = "cache:bSubscription:groupId:"
)

type (
	bSubscriptionModel interface {
		Insert(data *BSubscription) (int, error)
		FindOne(groupId int64, contractorId int64) (int, error)
		List(groupId int64) (*[]int64, error)
		Delete(groupId int64, contractorId int64) (int, error)
		DeleteAll(groupId int64) (int, error)
	}

	defaultBSubscriptionModel struct {
		conn redis.Redis
		table string
	}

	BSubscription struct {
		GroupId      int64 `db:"group_id"`
		ContractorId int64 `db:"contractor_id"`
	}
)

func newBSubscriptionModel(c redis.RedisConf) *defaultBSubscriptionModel {
	return &defaultBSubscriptionModel{
		conn:       *c.NewRedis(),
		table:      "`b_subscription`",
	}
}

func (m *defaultBSubscriptionModel) Insert(data *BSubscription) (int, error) {
	bSubscriptionGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, data.GroupId)
	ret, err := m.conn.Sadd(bSubscriptionGroupIdKey, data.ContractorId)
	return ret, err
}

func (m *defaultBSubscriptionModel) FindOne(groupId int64, contractorId int64) (int, error) {
	bSubscriptionGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, groupId)
	ret, _, err := m.conn.Sscan(bSubscriptionGroupIdKey, 0, strconv.FormatInt(contractorId, 10), 1)
	
	if err != nil {
		return 0, err
	} else if len(ret) == 0 {
		return 0, ErrNotFound
	}
	return 1, nil
}

func (m *defaultBSubscriptionModel) List(groupId int64) (*[]int64, error) {
	bSubscriptionGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, groupId)
	ret, err := m.conn.Smembers(bSubscriptionGroupIdKey)

	switch err {
	case nil:
		var resp []int64
		for _, val := range ret{
			order_id, err := strconv.ParseInt(val, 10, 64)
			if err == nil {
				resp = append(resp, order_id)
			}
		}
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *defaultBSubscriptionModel) Delete(groupId int64, contractorId int64) (int, error) {
	bSubscriptionGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, groupId)
	ret, err := m.conn.Srem(bSubscriptionGroupIdKey, contractorId)
	return ret, err
}

func (m *defaultBSubscriptionModel) DeleteAll(groupId int64) (int, error) {
	bSubscriptionGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, groupId)
	ret, err := m.conn.Del(bSubscriptionGroupIdKey)
	return ret, err
}

func (m *defaultBSubscriptionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBSubscriptionGroupIdPrefix, primary)
}

func (m *defaultBSubscriptionModel) tableName() string {
	return m.table
}
