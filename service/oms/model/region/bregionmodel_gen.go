// Code generated by goctl. DO NOT EDIT!

package region

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bRegionFieldNames          = builder.RawFieldNames(&BRegion{})
	bRegionRows                = strings.Join(bRegionFieldNames, ",")
	bRegionRowsExpectAutoSet   = strings.Join(stringx.Remove(bRegionFieldNames, "`region_id`", "`create_time`", "`update_time`"), ",")
	bRegionRowsWithPlaceHolder = strings.Join(stringx.Remove(bRegionFieldNames, "`region_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBRegionRegionIdPrefix = "cache:bRegion:regionId:"
	cacheBRegionPostcodePrefix = "cache:bRegion:postcode:"
)

type (
	bRegionModel interface {
		Insert(ctx context.Context, data *BRegion) (sql.Result, error)
		FindOne(ctx context.Context, regionId int64) (*BRegion, error)
		FindOneByPostcode(ctx context.Context, postcode string) (*BRegion, error)
		Update(ctx context.Context, data *BRegion) error
		Delete(ctx context.Context, regionId int64) error
	}

	defaultBRegionModel struct {
		sqlc.CachedConn
		table string
	}

	BRegion struct {
		RegionId      int64  `db:"region_id"`
		RegionName    string `db:"region_name"`
		RegionType    string `db:"region_type"`
		Postcode      string `db:"postcode"`
		StateCode     string `db:"state_code"`
		StateName     string `db:"state_name"`
		ChargeType    int64  `db:"charge_type"`
		ChargeAmount  int64  `db:"charge_amount"`
		ServiceStatus int64  `db:"service_status"`
	}
)

func newBRegionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBRegionModel {
	return &defaultBRegionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_region`",
	}
}

func (m *defaultBRegionModel) Insert(ctx context.Context, data *BRegion) (sql.Result, error) {
	bRegionPostcodeKey := fmt.Sprintf("%s%v", cacheBRegionPostcodePrefix, data.Postcode)
	bRegionRegionIdKey := fmt.Sprintf("%s%v", cacheBRegionRegionIdPrefix, data.RegionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, bRegionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RegionName, data.RegionType, data.Postcode, data.StateCode, data.StateName, data.ChargeType, data.ChargeAmount, data.ServiceStatus)
	}, bRegionRegionIdKey, bRegionPostcodeKey)
	return ret, err
}

func (m *defaultBRegionModel) FindOne(ctx context.Context, regionId int64) (*BRegion, error) {
	bRegionRegionIdKey := fmt.Sprintf("%s%v", cacheBRegionRegionIdPrefix, regionId)
	var resp BRegion
	err := m.QueryRowCtx(ctx, &resp, bRegionRegionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `region_id` = ? limit 1", bRegionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, regionId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBRegionModel) FindOneByPostcode(ctx context.Context, postcode string) (*BRegion, error) {
	bRegionPostcodeKey := fmt.Sprintf("%s%v", cacheBRegionPostcodePrefix, postcode)
	var resp BRegion
	err := m.QueryRowIndexCtx(ctx, &resp, bRegionPostcodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `postcode` = ? limit 1", bRegionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postcode); err != nil {
			return nil, err
		}
		return resp.RegionId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBRegionModel) Update(ctx context.Context, data *BRegion) error {
	bRegionRegionIdKey := fmt.Sprintf("%s%v", cacheBRegionRegionIdPrefix, data.RegionId)
	bRegionPostcodeKey := fmt.Sprintf("%s%v", cacheBRegionPostcodePrefix, data.Postcode)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `region_id` = ?", m.table, bRegionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RegionName, data.RegionType, data.Postcode, data.StateCode, data.StateName, data.ChargeType, data.ChargeAmount, data.ServiceStatus, data.RegionId)
	}, bRegionRegionIdKey, bRegionPostcodeKey)
	return err
}

func (m *defaultBRegionModel) Delete(ctx context.Context, regionId int64) error {
	data, err := m.FindOne(ctx, regionId)
	if err != nil {
		return err
	}

	bRegionRegionIdKey := fmt.Sprintf("%s%v", cacheBRegionRegionIdPrefix, regionId)
	bRegionPostcodeKey := fmt.Sprintf("%s%v", cacheBRegionPostcodePrefix, data.Postcode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `region_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, regionId)
	}, bRegionRegionIdKey, bRegionPostcodeKey)
	return err
}

func (m *defaultBRegionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBRegionRegionIdPrefix, primary)
}

func (m *defaultBRegionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `region_id` = ? limit 1", bRegionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBRegionModel) tableName() string {
	return m.table
}
