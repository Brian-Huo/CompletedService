// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bCustomerFieldNames          = builder.RawFieldNames(&BCustomer{})
	bCustomerRows                = strings.Join(bCustomerFieldNames, ",")
	bCustomerRowsExpectAutoSet   = strings.Join(stringx.Remove(bCustomerFieldNames, "`customer_id`", "`create_time`", "`update_time`"), ",")
	bCustomerRowsWithPlaceHolder = strings.Join(stringx.Remove(bCustomerFieldNames, "`customer_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBCustomerCustomerIdPrefix     = "cache:bCustomer:customerId:"
	cacheBCustomerContactDetailsPrefix = "cache:bCustomer:contactDetails:"
)

type (
	bCustomerModel interface {
		Insert(ctx context.Context, data *BCustomer) (sql.Result, error)
		FindOne(ctx context.Context, customerId int64) (*BCustomer, error)
		FindOneByContactDetails(ctx context.Context, contactDetails string) (*BCustomer, error)
		Update(ctx context.Context, data *BCustomer) error
		Delete(ctx context.Context, customerId int64) error
	}

	defaultBCustomerModel struct {
		sqlc.CachedConn
		table string
	}

	BCustomer struct {
		CustomerId     int64  `db:"customer_id"`
		CustomerName   string `db:"customer_name"`
		CountryCode    string `db:"country_code"`
		ContactDetails string `db:"contact_details"`
	}
)

func newBCustomerModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBCustomerModel {
	return &defaultBCustomerModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_customer`",
	}
}

func (m *defaultBCustomerModel) Insert(ctx context.Context, data *BCustomer) (sql.Result, error) {
	bCustomerContactDetailsKey := fmt.Sprintf("%s%v", cacheBCustomerContactDetailsPrefix, data.ContactDetails)
	bCustomerCustomerIdKey := fmt.Sprintf("%s%v", cacheBCustomerCustomerIdPrefix, data.CustomerId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bCustomerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CustomerName, data.CountryCode, data.ContactDetails)
	}, bCustomerCustomerIdKey, bCustomerContactDetailsKey)
	return ret, err
}

func (m *defaultBCustomerModel) FindOne(ctx context.Context, customerId int64) (*BCustomer, error) {
	bCustomerCustomerIdKey := fmt.Sprintf("%s%v", cacheBCustomerCustomerIdPrefix, customerId)
	var resp BCustomer
	err := m.QueryRowCtx(ctx, &resp, bCustomerCustomerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `customer_id` = ? limit 1", bCustomerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, customerId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCustomerModel) FindOneByContactDetails(ctx context.Context, contactDetails string) (*BCustomer, error) {
	bCustomerContactDetailsKey := fmt.Sprintf("%s%v", cacheBCustomerContactDetailsPrefix, contactDetails)
	var resp BCustomer
	err := m.QueryRowIndexCtx(ctx, &resp, bCustomerContactDetailsKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `contact_details` = ? limit 1", bCustomerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, contactDetails); err != nil {
			return nil, err
		}
		return resp.CustomerId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCustomerModel) Update(ctx context.Context, data *BCustomer) error {
	bCustomerCustomerIdKey := fmt.Sprintf("%s%v", cacheBCustomerCustomerIdPrefix, data.CustomerId)
	bCustomerContactDetailsKey := fmt.Sprintf("%s%v", cacheBCustomerContactDetailsPrefix, data.ContactDetails)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `customer_id` = ?", m.table, bCustomerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CustomerName, data.CountryCode, data.ContactDetails, data.CustomerId)
	}, bCustomerCustomerIdKey, bCustomerContactDetailsKey)
	return err
}

func (m *defaultBCustomerModel) Delete(ctx context.Context, customerId int64) error {
	data, err := m.FindOne(ctx, customerId)
	if err != nil {
		return err
	}

	bCustomerCustomerIdKey := fmt.Sprintf("%s%v", cacheBCustomerCustomerIdPrefix, customerId)
	bCustomerContactDetailsKey := fmt.Sprintf("%s%v", cacheBCustomerContactDetailsPrefix, data.ContactDetails)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `customer_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, customerId)
	}, bCustomerCustomerIdKey, bCustomerContactDetailsKey)
	return err
}

func (m *defaultBCustomerModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBCustomerCustomerIdPrefix, primary)
}

func (m *defaultBCustomerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `customer_id` = ? limit 1", bCustomerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBCustomerModel) tableName() string {
	return m.table
}
