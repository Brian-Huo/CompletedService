// Code generated by goctl. DO NOT EDIT!

package orderdelay

import (
	"fmt"
	"strconv"

	"github.com/zeromicro/go-zero/core/stores/redis"
)

var (
	cacheROrderDelayContractorIdPrefix = "cache:rOrderDelay:contractId:"
)

type (
	rOrderDelayModel interface {
		Insert(data *ROrderDelay) (int, error)
		FindOne(contractorId int64, orderId int64) (int, error)
		List(contractorId int64) (*[]int64, error)
		Delete(contractorId int64, orderId int64) (int, error)
		DeleteAll(contractorId int64) (int, error)
	}

	defaultROrderDelayModel struct {
		conn redis.Redis
		table string
	}

	ROrderDelay struct {
		ContractorId int64 `db:"contractor_id"`
		OrderId      int64 `db:"order_id"`
	}
)

func newROrderDelayModel(c redis.RedisConf) *defaultROrderDelayModel {
	return &defaultROrderDelayModel{
		conn:       *c.NewRedis(),
		table:      "`r_order_delay`",
	}
}

func (m *defaultROrderDelayModel) Insert(data *ROrderDelay) (int, error) {
	rOrderDelayContractorIdKey := fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, data.ContractorId)
	ret, err := m.conn.Sadd(rOrderDelayContractorIdKey, data.OrderId)
	m.conn.Expire(rOrderDelayContractorIdKey, 86400)
	return ret, err
}

func (m *defaultROrderDelayModel) FindOne(contractorId int64, orderId int64) (int, error) {
	rOrderDelayContractorIdKey := fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, contractorId)
	ret, _, err := m.conn.Sscan(rOrderDelayContractorIdKey, 0, strconv.FormatInt(orderId, 10), 1)
	if err != nil {
		return 0, err
	} else if len(ret) == 0 {
		return 0, ErrNotFound
	}
	return 1, nil
}

func (m *defaultROrderDelayModel) List(contractorId int64) (*[]int64, error) {
	rOrderDelayContractorIdKey := fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, contractorId)
	ret, err := m.conn.Smembers(rOrderDelayContractorIdKey)
	switch err {
	case nil:
		var resp []int64
		for _, val := range ret{
			order_id, err := strconv.ParseInt(val, 10, 64)
			if err == nil {
				resp = append(resp, order_id)
			}
		}
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *defaultROrderDelayModel) Delete(contractorId int64, orderId int64) (int, error) {
	rOrderDelayContractorIdKey := fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, contractorId)
	ret, err := m.conn.Srem(rOrderDelayContractorIdKey, orderId)
	return ret, err
}

func (m *defaultROrderDelayModel) DeleteAll(contractorId int64) (int, error) {
	rOrderDelayContractorIdKey := fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, contractorId)
	ret, err := m.conn.Del(rOrderDelayContractorIdKey)
	return ret, err
}

func (m *defaultROrderDelayModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheROrderDelayContractorIdPrefix, primary)
}

func (m *defaultROrderDelayModel) tableName() string {
	return m.table
}
