// Code generated by goctl. DO NOT EDIT!

package subscriberecord

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rSubscribeRecordFieldNames          = builder.RawFieldNames(&RSubscribeRecord{})
	rSubscribeRecordRows                = strings.Join(rSubscribeRecordFieldNames, ",")
	rSubscribeRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(rSubscribeRecordFieldNames, "`create_time`", "`update_time`"), ",")
)

type (
	rSubscribeRecordModel interface {
		Insert(ctx context.Context, data *RSubscribeRecord) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64, contractorId int64) (*RSubscribeRecord, error)
		FindAllByGroupId(ctx context.Context, groupId int64) ([]*RSubscribeRecord, error)
		Delete(ctx context.Context, groupId int64, contractorId int64) error
	}

	defaultRSubscribeRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RSubscribeRecord struct {
		GroupId      int64 `db:"group_id"`
		ContractorId int64 `db:"contractor_id"`
	}
)

func newRSubscribeRecordModel(conn sqlx.SqlConn) *defaultRSubscribeRecordModel {
	return &defaultRSubscribeRecordModel{
		conn:  conn,
		table: "`r_subscribe_record`",
	}
}

func (m *defaultRSubscribeRecordModel) Insert(ctx context.Context, data *RSubscribeRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, rSubscribeRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.ContractorId)
	return ret, err
}

func (m *defaultRSubscribeRecordModel) FindOne(ctx context.Context, groupId int64, contractorId int64) (*RSubscribeRecord, error) {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? and `contractor_id` = ? limit 1", rSubscribeRecordRows, m.table)
	var resp RSubscribeRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, groupId, contractorId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRSubscribeRecordModel) FindAllByGroupId(ctx context.Context, groupId int64) ([]*RSubscribeRecord, error) {
	query := fmt.Sprintf("select %s from %s where `group_id` = ?", rSubscribeRecordRows, m.table)
	var resp []*RSubscribeRecord
	err := m.conn.QueryRowsCtx(ctx, &resp, query, groupId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRSubscribeRecordModel) Delete(ctx context.Context, groupId int64, contractorId int64) error {
	query := fmt.Sprintf("delete from %s where `group_id` = ? and `contractor_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, groupId, contractorId)
	return err
}