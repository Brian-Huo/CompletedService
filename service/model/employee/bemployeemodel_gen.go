// Code generated by goctl. DO NOT EDIT!

package employee

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bEmployeeFieldNames          = builder.RawFieldNames(&BEmployee{})
	bEmployeeRows                = strings.Join(bEmployeeFieldNames, ",")
	bEmployeeRowsExpectAutoSet   = strings.Join(stringx.Remove(bEmployeeFieldNames, "`employee_id`", "`create_time`", "`update_time`"), ",")
	bEmployeeRowsWithPlaceHolder = strings.Join(stringx.Remove(bEmployeeFieldNames, "`employee_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBEmployeeEmployeeIdPrefix = "cache:bEmployee:employeeId:"
)

type (
	bEmployeeModel interface {
		Insert(ctx context.Context, data *BEmployee) (sql.Result, error)
		FindOne(ctx context.Context, employeeId int64) (*BEmployee, error)
		FindAllByCompany(ctx context.Context, companyId int64) ([]*BEmployee, error)
		Update(ctx context.Context, data *BEmployee) error
		Delete(ctx context.Context, employeeId int64) error
		DeleteAllByCompany(ctx context.Context, companyId int64) error
	}

	defaultBEmployeeModel struct {
		sqlc.CachedConn
		table string
	}

	BEmployee struct {
		EmployeeId     int64          `db:"employee_id"`
		EmployeePhoto  sql.NullString `db:"employee_photo"`
		EmployeeName   string         `db:"employee_name"`
		ContactDetails string         `db:"contact_details"`
		CompanyId      int64          `db:"company_id"`
		LinkCode       string         `db:"link_code"`
		WorkStatus     int64          `db:"work_status"`
		OrderId        sql.NullInt64  `db:"order_id"`
	}
)

func newBEmployeeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBEmployeeModel {
	return &defaultBEmployeeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_employee`",
	}
}

func (m *defaultBEmployeeModel) Insert(ctx context.Context, data *BEmployee) (sql.Result, error) {
	bEmployeeEmployeeIdKey := fmt.Sprintf("%s%v", cacheBEmployeeEmployeeIdPrefix, data.EmployeeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, bEmployeeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EmployeePhoto, data.EmployeeName, data.ContactDetails, data.CompanyId, data.LinkCode, data.WorkStatus, data.OrderId)
	}, bEmployeeEmployeeIdKey)
	return ret, err
}

func (m *defaultBEmployeeModel) FindOne(ctx context.Context, employeeId int64) (*BEmployee, error) {
	bEmployeeEmployeeIdKey := fmt.Sprintf("%s%v", cacheBEmployeeEmployeeIdPrefix, employeeId)
	var resp BEmployee
	err := m.QueryRowCtx(ctx, &resp, bEmployeeEmployeeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `employee_id` = ? limit 1", bEmployeeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, employeeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBEmployeeModel) FindOnebyPhone(ctx context.Context, contactDetails int64) (*BEmployee, error) {
	bEmployeeContactDetails := fmt.Sprintf("%s%v", "cache:bEmployee:contactDetails:", contactDetails)
	var resp BEmployee
	err := m.QueryRowCtx(ctx, &resp, bEmployeeContactDetails, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `contact_details` = ? limit 1", bEmployeeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, contactDetails)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBEmployeeModel) FindAllByCompany(ctx context.Context, companyId int64) ([]*BEmployee, error) {
	var resp []*BEmployee

	query := fmt.Sprintf("select %s from %s where `company_id` = ?", bEmployeeRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, companyId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBEmployeeModel) Update(ctx context.Context, data *BEmployee) error {
	bEmployeeEmployeeIdKey := fmt.Sprintf("%s%v", cacheBEmployeeEmployeeIdPrefix, data.EmployeeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `employee_id` = ?", m.table, bEmployeeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EmployeePhoto, data.EmployeeName, data.ContactDetails, data.CompanyId, data.LinkCode, data.WorkStatus, data.OrderId, data.EmployeeId)
	}, bEmployeeEmployeeIdKey)
	return err
}

func (m *defaultBEmployeeModel) Delete(ctx context.Context, employeeId int64) error {
	bEmployeeEmployeeIdKey := fmt.Sprintf("%s%v", cacheBEmployeeEmployeeIdPrefix, employeeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `employee_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, employeeId)
	}, bEmployeeEmployeeIdKey)
	return err
}

func (m *defaultBEmployeeModel) DeleteAllByCompany(ctx context.Context, companyId int64) error {
	query := fmt.Sprintf("delete from %s where `company_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, companyId)
	return err
}

func (m *defaultBEmployeeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBEmployeeEmployeeIdPrefix, primary)
}

func (m *defaultBEmployeeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `employee_id` = ? limit 1", bEmployeeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBEmployeeModel) tableName() string {
	return m.table
}
