// Code generated by goctl. DO NOT EDIT!

package company

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bCompanyFieldNames          = builder.RawFieldNames(&BCompany{})
	bCompanyRows                = strings.Join(bCompanyFieldNames, ",")
	bCompanyRowsExpectAutoSet   = strings.Join(stringx.Remove(bCompanyFieldNames, "`company_id`", "`create_time`", "`update_time`"), ",")
	bCompanyRowsWithPlaceHolder = strings.Join(stringx.Remove(bCompanyFieldNames, "`company_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBCompanyCompanyIdPrefix = "cache:bCompany:companyId:"
)

type (
	bCompanyModel interface {
		Insert(ctx context.Context, data *BCompany) (sql.Result, error)
		FindOne(ctx context.Context, companyId int64) (*BCompany, error)
		FindOnebyPhone(ctx context.Context, companyId int64) (*BCompany, error)
		List(ctx context.Context) ([]*BCompany, error)
		Update(ctx context.Context, data *BCompany) error
		Delete(ctx context.Context, companyId int64) error
	}

	defaultBCompanyModel struct {
		sqlc.CachedConn
		table string
	}

	BCompany struct {
		CompanyId         int64          `db:"company_id"`
		CompanyName       string         `db:"company_name"`
		PaymentId         sql.NullInt64  `db:"payment_id"`
		DirectorName      sql.NullString `db:"director_name"`
		ContactDetails    string         `db:"contact_details"`
		RegisteredAddress sql.NullInt64  `db:"registered_address"`
		DepositeRate      int64          `db:"deposite_rate"`
	}
)

func newBCompanyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBCompanyModel {
	return &defaultBCompanyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_company`",
	}
}

func (m *defaultBCompanyModel) Insert(ctx context.Context, data *BCompany) (sql.Result, error) {
	bCompanyCompanyIdKey := fmt.Sprintf("%s%v", cacheBCompanyCompanyIdPrefix, data.CompanyId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, bCompanyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CompanyName, data.PaymentId, data.DirectorName, data.ContactDetails, data.RegisteredAddress, data.DepositeRate)
	}, bCompanyCompanyIdKey)
	return ret, err
}

func (m *defaultBCompanyModel) FindOne(ctx context.Context, companyId int64) (*BCompany, error) {
	bCompanyCompanyIdKey := fmt.Sprintf("%s%v", cacheBCompanyCompanyIdPrefix, companyId)
	var resp BCompany
	err := m.QueryRowCtx(ctx, &resp, bCompanyCompanyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `company_id` = ? limit 1", bCompanyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, companyId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCompanyModel) FindOnebyPhone(ctx context.Context, contactDetails int64) (*BCompany, error) {
	bCompanyContactDetails := fmt.Sprintf("%s%v", "cache:bCompany:contactDetails:", contactDetails)
	var resp BCompany
	err := m.QueryRowCtx(ctx, &resp, bCompanyContactDetails, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `contact_details` = ? limit 1", bCompanyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, contactDetails)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCompanyModel) List(ctx context.Context) ([]*BCompany, error) {
	var resp []*BCompany
	
	query := fmt.Sprintf("select %s from %s", bCompanyRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBCompanyModel) Update(ctx context.Context, data *BCompany) error {
	bCompanyCompanyIdKey := fmt.Sprintf("%s%v", cacheBCompanyCompanyIdPrefix, data.CompanyId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `company_id` = ?", m.table, bCompanyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CompanyName, data.PaymentId, data.DirectorName, data.ContactDetails, data.RegisteredAddress, data.DepositeRate, data.CompanyId)
	}, bCompanyCompanyIdKey)
	return err
}

func (m *defaultBCompanyModel) Delete(ctx context.Context, companyId int64) error {
	bCompanyCompanyIdKey := fmt.Sprintf("%s%v", cacheBCompanyCompanyIdPrefix, companyId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `company_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, companyId)
	}, bCompanyCompanyIdKey)
	return err
}

func (m *defaultBCompanyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBCompanyCompanyIdPrefix, primary)
}

func (m *defaultBCompanyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `company_id` = ? limit 1", bCompanyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBCompanyModel) tableName() string {
	return m.table
}
