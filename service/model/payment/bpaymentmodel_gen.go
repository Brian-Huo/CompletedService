// Code generated by goctl. DO NOT EDIT!

package payment

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bPaymentFieldNames          = builder.RawFieldNames(&BPayment{})
	bPaymentRows                = strings.Join(bPaymentFieldNames, ",")
	bPaymentRowsExpectAutoSet   = strings.Join(stringx.Remove(bPaymentFieldNames, "`payment_id`", "`create_time`", "`update_time`"), ",")
	bPaymentRowsWithPlaceHolder = strings.Join(stringx.Remove(bPaymentFieldNames, "`payment_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBPaymentPaymentIdPrefix = "cache:bPayment:paymentId:"
	cacheBPaymentCardNumberPrefix = "cache:bPayment:cardNumber:"
)

type (
	bPaymentModel interface {
		Insert(ctx context.Context, data *BPayment) (sql.Result, error)
		FindOne(ctx context.Context, paymentId int64) (*BPayment, error)
		FindOneByCard(ctx context.Context, cardNumber string) (*BPayment, error)
		Update(ctx context.Context, data *BPayment) error
		Delete(ctx context.Context, paymentId int64) error
	}

	defaultBPaymentModel struct {
		sqlc.CachedConn
		table string
	}

	BPayment struct {
		PaymentId    int64     `db:"payment_id"`
		CardNumber   string    `db:"card_number"`
		HolderName   string    `db:"holder_name"`
		ExpiryTime   time.Time `db:"expiry_time"`
		SecurityCode string    `db:"security_code"`
	}
)

func newBPaymentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBPaymentModel {
	return &defaultBPaymentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_payment`",
	}
}

func (m *defaultBPaymentModel) Insert(ctx context.Context, data *BPayment) (sql.Result, error) {
	bPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheBPaymentPaymentIdPrefix, data.PaymentId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bPaymentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CardNumber, data.HolderName, data.ExpiryTime, data.SecurityCode)
	}, bPaymentPaymentIdKey)
	return ret, err
}

func (m *defaultBPaymentModel) FindOne(ctx context.Context, paymentId int64) (*BPayment, error) {
	bPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheBPaymentPaymentIdPrefix, paymentId)
	var resp BPayment
	err := m.QueryRowCtx(ctx, &resp, bPaymentPaymentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `payment_id` = ? limit 1", bPaymentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, paymentId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBPaymentModel) FindOneByCard(ctx context.Context, cardNumber string) (*BPayment, error) {
	bPaymentCardNumberKey := fmt.Sprintf("%s%v", cacheBPaymentCardNumberPrefix, cardNumber)
	var resp BPayment
	err := m.QueryRowCtx(ctx, &resp, bPaymentCardNumberKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `card_number` = ? limit 1", bPaymentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, cardNumber)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBPaymentModel) Update(ctx context.Context, data *BPayment) error {
	bPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheBPaymentPaymentIdPrefix, data.PaymentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `payment_id` = ?", m.table, bPaymentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CardNumber, data.HolderName, data.ExpiryTime, data.SecurityCode, data.PaymentId)
	}, bPaymentPaymentIdKey)
	return err
}

func (m *defaultBPaymentModel) Delete(ctx context.Context, paymentId int64) error {
	bPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheBPaymentPaymentIdPrefix, paymentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `payment_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, paymentId)
	}, bPaymentPaymentIdKey)
	return err
}

func (m *defaultBPaymentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBPaymentPaymentIdPrefix, primary)
}

func (m *defaultBPaymentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `payment_id` = ? limit 1", bPaymentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBPaymentModel) tableName() string {
	return m.table
}
