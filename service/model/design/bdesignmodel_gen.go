// Code generated by goctl. DO NOT EDIT!

package design

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bDesignFieldNames          = builder.RawFieldNames(&BDesign{})
	bDesignRows                = strings.Join(bDesignFieldNames, ",")
	bDesignRowsExpectAutoSet   = strings.Join(stringx.Remove(bDesignFieldNames, "`design_id`", "`create_time`", "`update_time`"), ",")
	bDesignRowsWithPlaceHolder = strings.Join(stringx.Remove(bDesignFieldNames, "`design_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBDesignDesignIdPrefix = "cache:bDesign:designId:"
)

type (
	bDesignModel interface {
		Insert(ctx context.Context, data *BDesign) (sql.Result, error)
		FindOne(ctx context.Context, designId int64) (*BDesign, error)
		FindAllByCompany(ctx context.Context, companyId int64) ([]*BDesign, error)
		FindAllByService(ctx context.Context, serviceId int64) ([]*BDesign, error)
		Update(ctx context.Context, data *BDesign) error
		Delete(ctx context.Context, designId int64) error
		DeleteAllByCompany(ctx context.Context, companyId int64) error
		DeleteAllByService(ctx context.Context, serviceId int64) error
	}

	defaultBDesignModel struct {
		sqlc.CachedConn
		table string
	}

	BDesign struct {
		DesignId  int64   `db:"design_id"`
		CompanyId int64   `db:"company_id"`
		ServiceId int64   `db:"service_id"`
		Price     float64 `db:"price"`
		Comments  string  `db:"comments"`
	}
)

func newBDesignModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBDesignModel {
	return &defaultBDesignModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_design`",
	}
}

func (m *defaultBDesignModel) Insert(ctx context.Context, data *BDesign) (sql.Result, error) {
	bDesignDesignIdKey := fmt.Sprintf("%s%v", cacheBDesignDesignIdPrefix, data.DesignId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bDesignRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CompanyId, data.ServiceId, data.Price, data.Comments)
	}, bDesignDesignIdKey)
	return ret, err
}

func (m *defaultBDesignModel) FindOne(ctx context.Context, designId int64) (*BDesign, error) {
	bDesignDesignIdKey := fmt.Sprintf("%s%v", cacheBDesignDesignIdPrefix, designId)
	var resp BDesign
	err := m.QueryRowCtx(ctx, &resp, bDesignDesignIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `design_id` = ? limit 1", bDesignRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, designId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBDesignModel) FindAllByCompany(ctx context.Context, companyId int64) ([]*BDesign, error) {
	var resp []*BDesign

	query := fmt.Sprintf("select %s from %s where `company_id` = ?", bDesignRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, companyId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBDesignModel) FindAllByService(ctx context.Context, serviceId int64) ([]*BDesign, error) {
	var resp []*BDesign

	query := fmt.Sprintf("select %s from %s where `service_id` = ?", bDesignRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, serviceId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBDesignModel) Update(ctx context.Context, data *BDesign) error {
	bDesignDesignIdKey := fmt.Sprintf("%s%v", cacheBDesignDesignIdPrefix, data.DesignId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `design_id` = ?", m.table, bDesignRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CompanyId, data.ServiceId, data.Price, data.Comments, data.DesignId)
	}, bDesignDesignIdKey)
	return err
}

func (m *defaultBDesignModel) Delete(ctx context.Context, designId int64) error {
	bDesignDesignIdKey := fmt.Sprintf("%s%v", cacheBDesignDesignIdPrefix, designId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `design_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, designId)
	}, bDesignDesignIdKey)
	return err
}

func (m *defaultBDesignModel) DeleteAllByCompany(ctx context.Context, companyId int64) error {
	query := fmt.Sprintf("delete from %s where `company_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, companyId)
	return err
}

func (m *defaultBDesignModel) DeleteAllByService(ctx context.Context, serviceId int64) error {
	query := fmt.Sprintf("delete from %s where `service_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, serviceId)
	return err
}

func (m *defaultBDesignModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBDesignDesignIdPrefix, primary)
}

func (m *defaultBDesignModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `design_id` = ? limit 1", bDesignRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBDesignModel) tableName() string {
	return m.table
}
