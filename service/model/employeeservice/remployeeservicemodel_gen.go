// Code generated by goctl. DO NOT EDIT!

package employeeservice

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rEmployeeServiceFieldNames          = builder.RawFieldNames(&REmployeeService{})
	rEmployeeServiceRows                = strings.Join(rEmployeeServiceFieldNames, ",")
	rEmployeeServiceRowsExpectAutoSet   = strings.Join(stringx.Remove(rEmployeeServiceFieldNames, "`create_time`", "`update_time`"), ",")
	rEmployeeServiceRowsWithPlaceHolder = strings.Join(stringx.Remove(rEmployeeServiceFieldNames, "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	rEmployeeServiceModel interface {
		Insert(ctx context.Context, data *REmployeeService) (sql.Result, error)
		FindOne(ctx context.Context, employeeId int64, serviceId int64) (*REmployeeService, error)
		FindAllByEmployee(ctx context.Context, employeeId int64) ([]*REmployeeService, error)
		FindAllByService(ctx context.Context, serviceId int64) ([]*REmployeeService, error)
		Delete(ctx context.Context, employeeId int64, serviceId int64) error
		DeleteAllByEmployee(ctx context.Context, employeeId int64) error
		DeleteAllByService(ctx context.Context, employeeId int64) error
	}

	defaultREmployeeServiceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	REmployeeService struct {
		EmployeeId int64 `db:"employee_id"`
		ServiceId  int64 `db:"service_id"`
	}
)

func newREmployeeServiceModel(conn sqlx.SqlConn) *defaultREmployeeServiceModel {
	return &defaultREmployeeServiceModel{
		conn:  conn,
		table: "`r_employee_service`",
	}
}

func (m *defaultREmployeeServiceModel) Insert(ctx context.Context, data *REmployeeService) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, rEmployeeServiceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.EmployeeId, data.ServiceId)
	return ret, err
}

func (m *defaultREmployeeServiceModel) FindOne(ctx context.Context, employeeId int64, serviceId int64) (*REmployeeService, error) {
	query := fmt.Sprintf("select %s from %s where `employee_id` = ? and `service_id` = ? limit 1", rEmployeeServiceRows, m.table)
	var resp REmployeeService
	err := m.conn.QueryRowCtx(ctx, &resp, query, employeeId, serviceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultREmployeeServiceModel) FindAllByEmployee(ctx context.Context, employeeId int64) ([]*REmployeeService, error) {
	query := fmt.Sprintf("select %s from %s where `employee_id` = ? limit 1", rEmployeeServiceRows, m.table)
	var resp []*REmployeeService
	err := m.conn.QueryRowsCtx(ctx, &resp, query, employeeId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultREmployeeServiceModel) FindAllByService(ctx context.Context, serviceId int64) ([]*REmployeeService, error) {
	query := fmt.Sprintf("select %s from %s where `service_id` = ? limit 1", rEmployeeServiceRows, m.table)
	var resp []*REmployeeService
	err := m.conn.QueryRowsCtx(ctx, &resp, query, serviceId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultREmployeeServiceModel) Delete(ctx context.Context, employeeId int64, serviceId int64) error {
	query := fmt.Sprintf("delete from %s where `employee_id` = ? and `service_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, employeeId, serviceId)
	return err
}

func (m *defaultREmployeeServiceModel) DeleteAllByEmployee(ctx context.Context, employeeId int64) error {
	query := fmt.Sprintf("delete from %s where `employee_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, employeeId)
	return err
}

func (m *defaultREmployeeServiceModel) DeleteAllByService(ctx context.Context, serviceId int64) error {
	query := fmt.Sprintf("delete from %s where `service_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, serviceId)
	return err
}

func (m *defaultREmployeeServiceModel) tableName() string {
	return m.table
}
