// Code generated by goctl. DO NOT EDIT!

package subscribegroup

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bSubscribeGroupFieldNames          = builder.RawFieldNames(&BSubscribeGroup{})
	bSubscribeGroupRows                = strings.Join(bSubscribeGroupFieldNames, ",")
	bSubscribeGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(bSubscribeGroupFieldNames, "`group_id`", "`create_time`", "`update_time`"), ",")
	bSubscribeGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(bSubscribeGroupFieldNames, "`group_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBSubscribeGroupGroupIdPrefix          = "cache:bSubscribeGroup:groupId:"
	cacheBSubscribeGroupCategoryLocationPrefix = "cache:bSubscribeGroup:category:location:"
)

type (
	bSubscribeGroupModel interface {
		Insert(ctx context.Context, data *BSubscribeGroup) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64) (*BSubscribeGroup, error)
		FindOneByCategoryLocation(ctx context.Context, category int64, location string) (*BSubscribeGroup, error)
		List(ctx context.Context) ([]*BSubscribeGroup, error)
		Update(ctx context.Context, data *BSubscribeGroup) error
		Delete(ctx context.Context, groupId int64) error
	}

	defaultBSubscribeGroupModel struct {
		sqlc.CachedConn
		table string
	}

	BSubscribeGroup struct {
		GroupId  int64  `db:"group_id"`
		Category int64  `db:"category"`
		Location string `db:"location"`
	}
)

func newBSubscribeGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBSubscribeGroupModel {
	return &defaultBSubscribeGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_subscribe_group`",
	}
}

func (m *defaultBSubscribeGroupModel) Insert(ctx context.Context, data *BSubscribeGroup) (sql.Result, error) {
	bSubscribeGroupGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscribeGroupGroupIdPrefix, data.GroupId)
	bSubscribeGroupCategoryLocationKey := fmt.Sprintf("%s%v:%v", cacheBSubscribeGroupCategoryLocationPrefix, data.Category, data.Location)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, bSubscribeGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Category, data.Location)
	}, bSubscribeGroupCategoryLocationKey, bSubscribeGroupGroupIdKey)
	return ret, err
}

func (m *defaultBSubscribeGroupModel) FindOne(ctx context.Context, groupId int64) (*BSubscribeGroup, error) {
	bSubscribeGroupGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscribeGroupGroupIdPrefix, groupId)
	var resp BSubscribeGroup
	err := m.QueryRowCtx(ctx, &resp, bSubscribeGroupGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", bSubscribeGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBSubscribeGroupModel) FindOneByCategoryLocation(ctx context.Context, category int64, location string) (*BSubscribeGroup, error) {
	bSubscribeGroupCategoryLocationKey := fmt.Sprintf("%s%v:%v", cacheBSubscribeGroupCategoryLocationPrefix, category, location)
	var resp BSubscribeGroup
	err := m.QueryRowCtx(ctx, &resp, bSubscribeGroupCategoryLocationKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `category` = ? and `location` = ? limit 1", bSubscribeGroupRows, m.table)
		return conn.QueryRowCtx(ctx, &resp, query, category, location)
	})

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBSubscribeGroupModel) List(ctx context.Context) ([]*BSubscribeGroup, error) {
	var resp []*BSubscribeGroup

	query := fmt.Sprintf("select %s from %s", bSubscribeGroupRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBSubscribeGroupModel) Update(ctx context.Context, data *BSubscribeGroup) error {
	bSubscribeGroupGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscribeGroupGroupIdPrefix, data.GroupId)
	bSubscribeGroupCategoryLocationKey := fmt.Sprintf("%s%v:%v", cacheBSubscribeGroupCategoryLocationPrefix, data.Category, data.Location)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, bSubscribeGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Category, data.Location, data.GroupId)
	}, bSubscribeGroupGroupIdKey, bSubscribeGroupCategoryLocationKey)
	return err
}

func (m *defaultBSubscribeGroupModel) Delete(ctx context.Context, groupId int64) error {
	data, err := m.FindOne(ctx, groupId)
	if err != nil {
		return err
	}

	bSubscribeGroupCategoryLocationKey := fmt.Sprintf("%s%v:%v", cacheBSubscribeGroupCategoryLocationPrefix, data.Category, data.Location)
	bSubscribeGroupGroupIdKey := fmt.Sprintf("%s%v", cacheBSubscribeGroupGroupIdPrefix, groupId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, bSubscribeGroupGroupIdKey, bSubscribeGroupCategoryLocationKey)
	return err
}

func (m *defaultBSubscribeGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBSubscribeGroupGroupIdPrefix, primary)
}

func (m *defaultBSubscribeGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", bSubscribeGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBSubscribeGroupModel) tableName() string {
	return m.table
}
