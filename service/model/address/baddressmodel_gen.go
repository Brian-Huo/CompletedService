// Code generated by goctl. DO NOT EDIT!

package address

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bAddressFieldNames          = builder.RawFieldNames(&BAddress{})
	bAddressRows                = strings.Join(bAddressFieldNames, ",")
	bAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(bAddressFieldNames, "`address_id`", "`create_time`", "`update_time`"), ",")
	bAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(bAddressFieldNames, "`address_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBAddressAddressIdPrefix = "cache:bAddress:addressId:"
)

type (
	bAddressModel interface {
		Insert(ctx context.Context, data *BAddress) (sql.Result, error)
		FindOne(ctx context.Context, addressId int64) (*BAddress, error)
		Update(ctx context.Context, data *BAddress) error
		Delete(ctx context.Context, addressId int64) error
	}

	defaultBAddressModel struct {
		sqlc.CachedConn
		table string
	}

	BAddress struct {
		AddressId      int64          `db:"address_id"`
		AddressDetails string         `db:"address_details"`
		Suburb         string         `db:"suburb"`
		Postcode       string         `db:"postcode"`
		StateCode      string         `db:"state_code"`
		Country        sql.NullString `db:"country"`
	}
)

func newBAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBAddressModel {
	return &defaultBAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_address`",
	}
}

func (m *defaultBAddressModel) Insert(ctx context.Context, data *BAddress) (sql.Result, error) {
	bAddressAddressIdKey := fmt.Sprintf("%s%v", cacheBAddressAddressIdPrefix, data.AddressId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, bAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AddressDetails, data.Suburb, data.Postcode, data.StateCode, data.Country)
	}, bAddressAddressIdKey)
	return ret, err
}

func (m *defaultBAddressModel) FindOne(ctx context.Context, addressId int64) (*BAddress, error) {
	bAddressAddressIdKey := fmt.Sprintf("%s%v", cacheBAddressAddressIdPrefix, addressId)
	var resp BAddress
	err := m.QueryRowCtx(ctx, &resp, bAddressAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", bAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, addressId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBAddressModel) Update(ctx context.Context, data *BAddress) error {
	bAddressAddressIdKey := fmt.Sprintf("%s%v", cacheBAddressAddressIdPrefix, data.AddressId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `address_id` = ?", m.table, bAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AddressDetails, data.Suburb, data.Postcode, data.StateCode, data.Country, data.AddressId)
	}, bAddressAddressIdKey)
	return err
}

func (m *defaultBAddressModel) Delete(ctx context.Context, addressId int64) error {
	bAddressAddressIdKey := fmt.Sprintf("%s%v", cacheBAddressAddressIdPrefix, addressId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `address_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, addressId)
	}, bAddressAddressIdKey)
	return err
}

func (m *defaultBAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBAddressAddressIdPrefix, primary)
}

func (m *defaultBAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", bAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBAddressModel) tableName() string {
	return m.table
}
