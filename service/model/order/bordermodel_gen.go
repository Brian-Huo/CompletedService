// Code generated by goctl. DO NOT EDIT!

package order

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bOrderFieldNames          = builder.RawFieldNames(&BOrder{})
	bOrderRows                = strings.Join(bOrderFieldNames, ",")
	bOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(bOrderFieldNames, "`order_id`", "`create_time`", "`update_time`"), ",")
	bOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(bOrderFieldNames, "`order_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBOrderOrderIdPrefix = "cache:bOrder:orderId:"
)

type (
	bOrderModel interface {
		Insert(ctx context.Context, data *BOrder) (sql.Result, error)
		FindOne(ctx context.Context, orderId int64) (*BOrder, error)
		FindAllByAddress(ctx context.Context, addressId int64) ([]*BOrder, error)
		FindAllByFinance(ctx context.Context, financeId int64) ([]*BOrder, error)
		FindAllByCustomer(ctx context.Context, customerId int64) ([]*BOrder, error)
		FindAllByContractor(ctx context.Context, contractorId int64) ([]*BOrder, error)
		Update(ctx context.Context, data *BOrder) error
		Delete(ctx context.Context, orderId int64) error
		DeleteAllByCustomer(ctx context.Context, customerId int64) error
		DeleteAllByContractor(ctx context.Context, contractorId int64) error
	}

	defaultBOrderModel struct {
		sqlc.CachedConn
		table string
	}

	BOrder struct {
		OrderId             int64          `db:"order_id"`
		CustomerId          int64          `db:"customer_id"`
		AddressId           int64          `db:"address_id"`
		ContractorId        sql.NullInt64  `db:"contractor_id"`
		FinanceId           sql.NullInt64  `db:"finance_id"`
		CategoryId          int64          `db:"category_id"`
		ServiceList         string         `db:"service_list"`
		DepositePayment     int64          `db:"deposite_payment"`
		DepositeAmount      float64        `db:"deposite_amount"`
		DepositeDate        time.Time      `db:"deposite_date"`
		FinalPayment        sql.NullInt64  `db:"final_payment"`
		FinalAmount         float64        `db:"final_amount"`
		FinalPaymentDate    sql.NullTime   `db:"final_payment_date"`
		CurrentDepositeRate int64          `db:"current_deposite_rate"`
		GstAmount           float64        `db:"gst_amount"`
		TotalFee            float64        `db:"total_fee"`
		OrderDescription    sql.NullString `db:"order_description"`
		PostDate            time.Time      `db:"post_date"`
		ReserveDate         time.Time      `db:"reserve_date"`
		FinishDate          sql.NullTime   `db:"finish_date"`
		Status              int64          `db:"status"`
		UrgantFlag          int64          `db:"urgant_flag"`
	}
)

func newBOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBOrderModel {
	return &defaultBOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_order`",
	}
}

func (m *defaultBOrderModel) Insert(ctx context.Context, data *BOrder) (sql.Result, error) {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CustomerId, data.AddressId, data.ContractorId, data.FinanceId, data.CategoryId, data.ServiceList, data.DepositePayment, data.DepositeAmount, data.DepositeDate, data.FinalPayment, data.FinalAmount, data.FinalPaymentDate, data.CurrentDepositeRate, data.GstAmount, data.TotalFee, data.OrderDescription, data.PostDate, data.ReserveDate, data.FinishDate, data.Status, data.UrgantFlag)
	}, bOrderOrderIdKey)
	return ret, err
}

func (m *defaultBOrderModel) FindOne(ctx context.Context, orderId int64) (*BOrder, error) {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, orderId)
	var resp BOrder
	err := m.QueryRowCtx(ctx, &resp, bOrderOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) FindAllByAddress(ctx context.Context, addressId int64) ([]*BOrder, error) {
	var resp []*BOrder

	query := fmt.Sprintf("select %s from %s where `address_id` = ?", bOrderRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, addressId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) FindAllByFinance(ctx context.Context, financeId int64) ([]*BOrder, error) {
	var resp []*BOrder

	query := fmt.Sprintf("select %s from %s where `finance_id` = ?", bOrderRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, financeId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) FindAllByCustomer(ctx context.Context, customerId int64) ([]*BOrder, error) {
	var resp []*BOrder

	query := fmt.Sprintf("select %s from %s where `customer_id` = ?", bOrderRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, customerId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) FindAllByContractor(ctx context.Context, contractorId int64) ([]*BOrder, error) {
	var resp []*BOrder

	query := fmt.Sprintf("select %s from %s where `contractor_id` = ?", bOrderRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, contractorId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrderModel) Update(ctx context.Context, data *BOrder) error {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, bOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CustomerId, data.AddressId, data.ContractorId, data.FinanceId, data.CategoryId, data.ServiceList, data.DepositePayment, data.DepositeAmount, data.DepositeDate, data.FinalPayment, data.FinalAmount, data.FinalPaymentDate, data.CurrentDepositeRate, data.GstAmount, data.TotalFee, data.OrderDescription, data.PostDate, data.ReserveDate, data.FinishDate, data.Status, data.UrgantFlag, data.OrderId)
	}, bOrderOrderIdKey)
	return err
}

func (m *defaultBOrderModel) Delete(ctx context.Context, orderId int64) error {
	bOrderOrderIdKey := fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, bOrderOrderIdKey)
	return err
}

func (m *defaultBOrderModel) DeleteAllByAddress(ctx context.Context, addressId int64) error {
	query := fmt.Sprintf("delete from %s where `address_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, addressId)
	return err
}

func (m *defaultBOrderModel) DeleteAllByCustomer(ctx context.Context, customerId int64) error {
	query := fmt.Sprintf("delete from %s where `customer_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, customerId)
	return err
}

func (m *defaultBOrderModel) DeleteAllByContractor(ctx context.Context, contractorId int64) error {
	query := fmt.Sprintf("delete from %s where `contractor_id` = ?", m.table)
	_,  err := m.ExecNoCacheCtx(ctx, query, contractorId)
	return err
}

func (m *defaultBOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBOrderOrderIdPrefix, primary)
}

func (m *defaultBOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBOrderModel) tableName() string {
	return m.table
}
