// Code generated by goctl. DO NOT EDIT!

package service

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bServiceFieldNames          = builder.RawFieldNames(&BService{})
	bServiceRows                = strings.Join(bServiceFieldNames, ",")
	bServiceRowsExpectAutoSet   = strings.Join(stringx.Remove(bServiceFieldNames, "`service_id`", "`create_time`", "`update_time`"), ",")
	bServiceRowsWithPlaceHolder = strings.Join(stringx.Remove(bServiceFieldNames, "`service_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBServiceServiceIdPrefix = "cache:bService:serviceId:"
)

type (
	bServiceModel interface {
		Insert(ctx context.Context, data *BService) (sql.Result, error)
		FindOne(ctx context.Context, serviceId int64) (*BService, error)
		List(ctx context.Context) ([]*BService, error)
		Update(ctx context.Context, data *BService) error
		Delete(ctx context.Context, serviceId int64) error
	}

	defaultBServiceModel struct {
		sqlc.CachedConn
		table string
	}

	BService struct {
		ServiceId          	int64       `db:"service_id"`
		ServiceType        	string      `db:"service_type"`
		ServiceDescription 	string      `db:"service_description"`
		ServicePrice 		float64     `db:"service_price"`
	}
)

func newBServiceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBServiceModel {
	return &defaultBServiceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`b_service`",
	}
}

func (m *defaultBServiceModel) Insert(ctx context.Context, data *BService) (sql.Result, error) {
	bServiceServiceIdKey := fmt.Sprintf("%s%v", cacheBServiceServiceIdPrefix, data.ServiceId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bServiceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ServiceType, data.ServiceDescription, data.ServicePrice)
	}, bServiceServiceIdKey)
	return ret, err
}

func (m *defaultBServiceModel) FindOne(ctx context.Context, serviceId int64) (*BService, error) {
	bServiceServiceIdKey := fmt.Sprintf("%s%v", cacheBServiceServiceIdPrefix, serviceId)
	var resp BService
	err := m.QueryRowCtx(ctx, &resp, bServiceServiceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `service_id` = ? limit 1", bServiceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, serviceId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBServiceModel) List(ctx context.Context) ([]*BService, error) {
	var resp []*BService

	query := fmt.Sprintf("select %s from %s", bServiceRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBServiceModel) Update(ctx context.Context, data *BService) error {
	bServiceServiceIdKey := fmt.Sprintf("%s%v", cacheBServiceServiceIdPrefix, data.ServiceId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `service_id` = ?", m.table, bServiceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ServiceType, data.ServiceDescription, data.ServicePrice, data.ServiceId)
	}, bServiceServiceIdKey)
	return err
}

func (m *defaultBServiceModel) Delete(ctx context.Context, serviceId int64) error {
	bServiceServiceIdKey := fmt.Sprintf("%s%v", cacheBServiceServiceIdPrefix, serviceId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `service_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, serviceId)
	}, bServiceServiceIdKey)
	return err
}

func (m *defaultBServiceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBServiceServiceIdPrefix, primary)
}

func (m *defaultBServiceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `service_id` = ? limit 1", bServiceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBServiceModel) tableName() string {
	return m.table
}
