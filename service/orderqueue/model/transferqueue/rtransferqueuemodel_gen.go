// Code generated by goctl. DO NOT EDIT!

package transferqueue

import (
	"fmt"
	"strconv"

	"github.com/zeromicro/go-zero/core/stores/redis"
)

var (
	cacheRTransferQueuePrefix = "cache:rTransferQueue"
)

type (
	rTransferQueueModel interface {
		Insert(data *RTransferQueue) (error)
		FindOne(orderId int64) (*string, error)
		Delete(orderId int64) (bool, error)
	}

	defaultRTransferQueueModel struct {
		conn redis.Redis
		table string
	}

	RTransferQueue struct {
		OrderId int64 `db:"order_id"`
		Contact string `db:"cantact"`
	}
)

func newRTransferQueueModel(c redis.RedisConf) *defaultRTransferQueueModel {
	return &defaultRTransferQueueModel{
		conn:       *c.NewRedis(),
		table:      "`r_transfer_queue`",
	}
}

func (m *defaultRTransferQueueModel) Insert(data *RTransferQueue) (error) {
	err := m.conn.Hset(cacheRTransferQueuePrefix, strconv.FormatInt(data.OrderId, 10), data.Contact)
	return err
}

func (m *defaultRTransferQueueModel) FindOne(orderId int64) (*string, error) {
	ret, err := m.conn.Hget(cacheRTransferQueuePrefix, strconv.FormatInt(orderId, 10))
	switch err {
	case nil:
		return &ret, nil
	case redis.Nil:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRTransferQueueModel) Delete(orderId int64) (bool, error) {
	ret, err := m.conn.Hdel(cacheRTransferQueuePrefix, strconv.FormatInt(orderId, 10))
	return ret, err
}

func (m *defaultRTransferQueueModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRTransferQueuePrefix, primary)
}

func (m *defaultRTransferQueueModel) tableName() string {
	return m.table
}
